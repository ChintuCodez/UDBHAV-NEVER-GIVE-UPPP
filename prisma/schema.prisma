// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissions Submission[]
  reviews     Review[]
  projects    Project[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  submissions Submission[]

  @@map("projects")
}

model Submission {
  id          String        @id @default(cuid())
  title       String
  content     String
  fileType    FileType
  filePath    String?
  projectId   String
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  submitterId String
  submitter   User          @relation(fields: [submitterId], references: [id], onDelete: Cascade)
  status      SubmissionStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  reviews     Review[]
  aiAnalysis  AiAnalysis?

  @@map("submissions")
}

model Review {
  id           String   @id @default(cuid())
  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  reviewerId   String
  reviewer     User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  score        Int
  feedback     String
  suggestions  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("reviews")
}

model AiAnalysis {
  id           String   @id @default(cuid())
  submissionId String   @unique
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  
  // Code Analysis
  codeQuality  Float?
  complexity   Float?
  maintainability Float?
  performance  Float?
  
  // Text Analysis
  readability  Float?
  grammar      Float?
  structure    Float?
  
  // Plagiarism Detection
  plagiarismScore Float?
  similarityMatches Json?
  
  // AI Feedback
  aiFeedback   String
  suggestions  Json?
  strengths    Json?
  weaknesses   Json?
  
  // Overall Assessment
  overallScore Float
  confidence   Float
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("ai_analyses")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum FileType {
  CODE
  DOCUMENT
  PRESENTATION
  OTHER
}

enum SubmissionStatus {
  PENDING
  UNDER_REVIEW
  REVIEWED
  APPROVED
  REJECTED
}